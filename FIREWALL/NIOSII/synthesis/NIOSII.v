// NIOSII.v

// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module NIOSII (
		input  wire        clk_clk,                               //                             clk.clk
		output wire [8:0]  greenleds_export,                      //                       greenleds.export
		input  wire [3:0]  push_buttons_export,                   //                    push_buttons.export
		output wire [17:0] redleds_export,                        //                         redleds.export
		input  wire        reset_reset,                           //                           reset.reset
		output wire        sdram_clk_clk,                         //                       sdram_clk.clk
		output wire [12:0] sdram_wire_addr,                       //                      sdram_wire.addr
		output wire [1:0]  sdram_wire_ba,                         //                                .ba
		output wire        sdram_wire_cas_n,                      //                                .cas_n
		output wire        sdram_wire_cke,                        //                                .cke
		output wire        sdram_wire_cs_n,                       //                                .cs_n
		inout  wire [31:0] sdram_wire_dq,                         //                                .dq
		output wire [3:0]  sdram_wire_dqm,                        //                                .dqm
		output wire        sdram_wire_ras_n,                      //                                .ras_n
		output wire        sdram_wire_we_n,                       //                                .we_n
		output wire [6:0]  seg7_0_export,                         //                          seg7_0.export
		output wire [6:0]  seg7_1_export,                         //                          seg7_1.export
		output wire [6:0]  seg7_2_export,                         //                          seg7_2.export
		output wire [6:0]  seg7_3_export,                         //                          seg7_3.export
		output wire [6:0]  seg7_4_export,                         //                          seg7_4.export
		output wire [6:0]  seg7_5_export,                         //                          seg7_5.export
		output wire [6:0]  seg7_6_export,                         //                          seg7_6.export
		output wire [6:0]  seg7_7_export,                         //                          seg7_7.export
		input  wire [17:0] switches_export,                       //                        switches.export
		output wire        tse_mac_mdio_connection_mdc,           //         tse_mac_mdio_connection.mdc
		input  wire        tse_mac_mdio_connection_mdio_in,       //                                .mdio_in
		output wire        tse_mac_mdio_connection_mdio_out,      //                                .mdio_out
		output wire        tse_mac_mdio_connection_mdio_oen,      //                                .mdio_oen
		output wire        tse_mac_misc_connection_magic_wakeup,  //         tse_mac_misc_connection.magic_wakeup
		input  wire        tse_mac_misc_connection_magic_sleep_n, //                                .magic_sleep_n
		input  wire        tse_mac_misc_connection_ff_tx_crc_fwd, //                                .ff_tx_crc_fwd
		output wire        tse_mac_misc_connection_ff_tx_septy,   //                                .ff_tx_septy
		output wire        tse_mac_misc_connection_tx_ff_uflow,   //                                .tx_ff_uflow
		output wire        tse_mac_misc_connection_ff_tx_a_full,  //                                .ff_tx_a_full
		output wire        tse_mac_misc_connection_ff_tx_a_empty, //                                .ff_tx_a_empty
		output wire [17:0] tse_mac_misc_connection_rx_err_stat,   //                                .rx_err_stat
		output wire [3:0]  tse_mac_misc_connection_rx_frm_type,   //                                .rx_frm_type
		output wire        tse_mac_misc_connection_ff_rx_dsav,    //                                .ff_rx_dsav
		output wire        tse_mac_misc_connection_ff_rx_a_full,  //                                .ff_rx_a_full
		output wire        tse_mac_misc_connection_ff_rx_a_empty, //                                .ff_rx_a_empty
		input  wire [3:0]  tse_mac_rgmii_connection_rgmii_in,     //        tse_mac_rgmii_connection.rgmii_in
		output wire [3:0]  tse_mac_rgmii_connection_rgmii_out,    //                                .rgmii_out
		input  wire        tse_mac_rgmii_connection_rx_control,   //                                .rx_control
		output wire        tse_mac_rgmii_connection_tx_control,   //                                .tx_control
		input  wire        tse_mac_status_connection_set_10,      //       tse_mac_status_connection.set_10
		input  wire        tse_mac_status_connection_set_1000,    //                                .set_1000
		output wire        tse_mac_status_connection_eth_mode,    //                                .eth_mode
		output wire        tse_mac_status_connection_ena_10,      //                                .ena_10
		input  wire        tse_pcs_mac_rx_clock_connection_clk,   // tse_pcs_mac_rx_clock_connection.clk
		input  wire        tse_pcs_mac_tx_clock_connection_clk    // tse_pcs_mac_tx_clock_connection.clk
	);

	wire         sgdma_tx_out_valid;                                    // sgdma_tx:out_valid -> TSE:ff_tx_wren
	wire  [31:0] sgdma_tx_out_data;                                     // sgdma_tx:out_data -> TSE:ff_tx_data
	wire         sgdma_tx_out_ready;                                    // TSE:ff_tx_rdy -> sgdma_tx:out_ready
	wire         sgdma_tx_out_startofpacket;                            // sgdma_tx:out_startofpacket -> TSE:ff_tx_sop
	wire         sgdma_tx_out_endofpacket;                              // sgdma_tx:out_endofpacket -> TSE:ff_tx_eop
	wire         sgdma_tx_out_error;                                    // sgdma_tx:out_error -> TSE:ff_tx_err
	wire   [1:0] sgdma_tx_out_empty;                                    // sgdma_tx:out_empty -> TSE:ff_tx_mod
	wire         clocks_sys_clk_clk;                                    // clocks:sys_clk_clk -> [GREENLED:clk, JTAG:clk, NIOS2:clk, PUSHB:clk, REDLED:clk, SWITCH:clk, TSE:clk, TSE:ff_rx_clk, TSE:ff_tx_clk, avalon_st_adapter:in_clk_0_clk, descriptor_memory:clk, irq_mapper:clk, mm_interconnect_0:clocks_sys_clk_clk, rst_controller:clk, sdram:clk, seg7_0:clk, seg7_1:clk, seg7_2:clk, seg7_3:clk, seg7_4:clk, seg7_5:clk, seg7_6:clk, seg7_7:clk, sgdma_rx:clk, sgdma_tx:clk, sysid_qsys_0:clock, timer_0:clk]
	wire  [31:0] nios2_data_master_readdata;                            // mm_interconnect_0:NIOS2_data_master_readdata -> NIOS2:d_readdata
	wire         nios2_data_master_waitrequest;                         // mm_interconnect_0:NIOS2_data_master_waitrequest -> NIOS2:d_waitrequest
	wire         nios2_data_master_debugaccess;                         // NIOS2:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:NIOS2_data_master_debugaccess
	wire  [27:0] nios2_data_master_address;                             // NIOS2:d_address -> mm_interconnect_0:NIOS2_data_master_address
	wire   [3:0] nios2_data_master_byteenable;                          // NIOS2:d_byteenable -> mm_interconnect_0:NIOS2_data_master_byteenable
	wire         nios2_data_master_read;                                // NIOS2:d_read -> mm_interconnect_0:NIOS2_data_master_read
	wire         nios2_data_master_readdatavalid;                       // mm_interconnect_0:NIOS2_data_master_readdatavalid -> NIOS2:d_readdatavalid
	wire         nios2_data_master_write;                               // NIOS2:d_write -> mm_interconnect_0:NIOS2_data_master_write
	wire  [31:0] nios2_data_master_writedata;                           // NIOS2:d_writedata -> mm_interconnect_0:NIOS2_data_master_writedata
	wire  [31:0] sgdma_tx_descriptor_read_readdata;                     // mm_interconnect_0:sgdma_tx_descriptor_read_readdata -> sgdma_tx:descriptor_read_readdata
	wire         sgdma_tx_descriptor_read_waitrequest;                  // mm_interconnect_0:sgdma_tx_descriptor_read_waitrequest -> sgdma_tx:descriptor_read_waitrequest
	wire  [31:0] sgdma_tx_descriptor_read_address;                      // sgdma_tx:descriptor_read_address -> mm_interconnect_0:sgdma_tx_descriptor_read_address
	wire         sgdma_tx_descriptor_read_read;                         // sgdma_tx:descriptor_read_read -> mm_interconnect_0:sgdma_tx_descriptor_read_read
	wire         sgdma_tx_descriptor_read_readdatavalid;                // mm_interconnect_0:sgdma_tx_descriptor_read_readdatavalid -> sgdma_tx:descriptor_read_readdatavalid
	wire  [31:0] sgdma_rx_descriptor_read_readdata;                     // mm_interconnect_0:sgdma_rx_descriptor_read_readdata -> sgdma_rx:descriptor_read_readdata
	wire         sgdma_rx_descriptor_read_waitrequest;                  // mm_interconnect_0:sgdma_rx_descriptor_read_waitrequest -> sgdma_rx:descriptor_read_waitrequest
	wire  [31:0] sgdma_rx_descriptor_read_address;                      // sgdma_rx:descriptor_read_address -> mm_interconnect_0:sgdma_rx_descriptor_read_address
	wire         sgdma_rx_descriptor_read_read;                         // sgdma_rx:descriptor_read_read -> mm_interconnect_0:sgdma_rx_descriptor_read_read
	wire         sgdma_rx_descriptor_read_readdatavalid;                // mm_interconnect_0:sgdma_rx_descriptor_read_readdatavalid -> sgdma_rx:descriptor_read_readdatavalid
	wire         sgdma_tx_descriptor_write_waitrequest;                 // mm_interconnect_0:sgdma_tx_descriptor_write_waitrequest -> sgdma_tx:descriptor_write_waitrequest
	wire  [31:0] sgdma_tx_descriptor_write_address;                     // sgdma_tx:descriptor_write_address -> mm_interconnect_0:sgdma_tx_descriptor_write_address
	wire         sgdma_tx_descriptor_write_write;                       // sgdma_tx:descriptor_write_write -> mm_interconnect_0:sgdma_tx_descriptor_write_write
	wire  [31:0] sgdma_tx_descriptor_write_writedata;                   // sgdma_tx:descriptor_write_writedata -> mm_interconnect_0:sgdma_tx_descriptor_write_writedata
	wire         sgdma_rx_descriptor_write_waitrequest;                 // mm_interconnect_0:sgdma_rx_descriptor_write_waitrequest -> sgdma_rx:descriptor_write_waitrequest
	wire  [31:0] sgdma_rx_descriptor_write_address;                     // sgdma_rx:descriptor_write_address -> mm_interconnect_0:sgdma_rx_descriptor_write_address
	wire         sgdma_rx_descriptor_write_write;                       // sgdma_rx:descriptor_write_write -> mm_interconnect_0:sgdma_rx_descriptor_write_write
	wire  [31:0] sgdma_rx_descriptor_write_writedata;                   // sgdma_rx:descriptor_write_writedata -> mm_interconnect_0:sgdma_rx_descriptor_write_writedata
	wire  [31:0] sgdma_tx_m_read_readdata;                              // mm_interconnect_0:sgdma_tx_m_read_readdata -> sgdma_tx:m_read_readdata
	wire         sgdma_tx_m_read_waitrequest;                           // mm_interconnect_0:sgdma_tx_m_read_waitrequest -> sgdma_tx:m_read_waitrequest
	wire  [31:0] sgdma_tx_m_read_address;                               // sgdma_tx:m_read_address -> mm_interconnect_0:sgdma_tx_m_read_address
	wire         sgdma_tx_m_read_read;                                  // sgdma_tx:m_read_read -> mm_interconnect_0:sgdma_tx_m_read_read
	wire         sgdma_tx_m_read_readdatavalid;                         // mm_interconnect_0:sgdma_tx_m_read_readdatavalid -> sgdma_tx:m_read_readdatavalid
	wire  [31:0] nios2_instruction_master_readdata;                     // mm_interconnect_0:NIOS2_instruction_master_readdata -> NIOS2:i_readdata
	wire         nios2_instruction_master_waitrequest;                  // mm_interconnect_0:NIOS2_instruction_master_waitrequest -> NIOS2:i_waitrequest
	wire  [27:0] nios2_instruction_master_address;                      // NIOS2:i_address -> mm_interconnect_0:NIOS2_instruction_master_address
	wire         nios2_instruction_master_read;                         // NIOS2:i_read -> mm_interconnect_0:NIOS2_instruction_master_read
	wire         nios2_instruction_master_readdatavalid;                // mm_interconnect_0:NIOS2_instruction_master_readdatavalid -> NIOS2:i_readdatavalid
	wire         sgdma_rx_m_write_waitrequest;                          // mm_interconnect_0:sgdma_rx_m_write_waitrequest -> sgdma_rx:m_write_waitrequest
	wire  [31:0] sgdma_rx_m_write_address;                              // sgdma_rx:m_write_address -> mm_interconnect_0:sgdma_rx_m_write_address
	wire   [3:0] sgdma_rx_m_write_byteenable;                           // sgdma_rx:m_write_byteenable -> mm_interconnect_0:sgdma_rx_m_write_byteenable
	wire         sgdma_rx_m_write_write;                                // sgdma_rx:m_write_write -> mm_interconnect_0:sgdma_rx_m_write_write
	wire  [31:0] sgdma_rx_m_write_writedata;                            // sgdma_rx:m_write_writedata -> mm_interconnect_0:sgdma_rx_m_write_writedata
	wire         mm_interconnect_0_jtag_avalon_jtag_slave_chipselect;   // mm_interconnect_0:JTAG_avalon_jtag_slave_chipselect -> JTAG:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_avalon_jtag_slave_readdata;     // JTAG:av_readdata -> mm_interconnect_0:JTAG_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_avalon_jtag_slave_waitrequest;  // JTAG:av_waitrequest -> mm_interconnect_0:JTAG_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_avalon_jtag_slave_address;      // mm_interconnect_0:JTAG_avalon_jtag_slave_address -> JTAG:av_address
	wire         mm_interconnect_0_jtag_avalon_jtag_slave_read;         // mm_interconnect_0:JTAG_avalon_jtag_slave_read -> JTAG:av_read_n
	wire         mm_interconnect_0_jtag_avalon_jtag_slave_write;        // mm_interconnect_0:JTAG_avalon_jtag_slave_write -> JTAG:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_avalon_jtag_slave_writedata;    // mm_interconnect_0:JTAG_avalon_jtag_slave_writedata -> JTAG:av_writedata
	wire  [31:0] mm_interconnect_0_tse_control_port_readdata;           // TSE:reg_data_out -> mm_interconnect_0:TSE_control_port_readdata
	wire         mm_interconnect_0_tse_control_port_waitrequest;        // TSE:reg_busy -> mm_interconnect_0:TSE_control_port_waitrequest
	wire   [7:0] mm_interconnect_0_tse_control_port_address;            // mm_interconnect_0:TSE_control_port_address -> TSE:reg_addr
	wire         mm_interconnect_0_tse_control_port_read;               // mm_interconnect_0:TSE_control_port_read -> TSE:reg_rd
	wire         mm_interconnect_0_tse_control_port_write;              // mm_interconnect_0:TSE_control_port_write -> TSE:reg_wr
	wire  [31:0] mm_interconnect_0_tse_control_port_writedata;          // mm_interconnect_0:TSE_control_port_writedata -> TSE:reg_data_in
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata; // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;  // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire         mm_interconnect_0_sgdma_rx_csr_chipselect;             // mm_interconnect_0:sgdma_rx_csr_chipselect -> sgdma_rx:csr_chipselect
	wire  [31:0] mm_interconnect_0_sgdma_rx_csr_readdata;               // sgdma_rx:csr_readdata -> mm_interconnect_0:sgdma_rx_csr_readdata
	wire   [3:0] mm_interconnect_0_sgdma_rx_csr_address;                // mm_interconnect_0:sgdma_rx_csr_address -> sgdma_rx:csr_address
	wire         mm_interconnect_0_sgdma_rx_csr_read;                   // mm_interconnect_0:sgdma_rx_csr_read -> sgdma_rx:csr_read
	wire         mm_interconnect_0_sgdma_rx_csr_write;                  // mm_interconnect_0:sgdma_rx_csr_write -> sgdma_rx:csr_write
	wire  [31:0] mm_interconnect_0_sgdma_rx_csr_writedata;              // mm_interconnect_0:sgdma_rx_csr_writedata -> sgdma_rx:csr_writedata
	wire         mm_interconnect_0_sgdma_tx_csr_chipselect;             // mm_interconnect_0:sgdma_tx_csr_chipselect -> sgdma_tx:csr_chipselect
	wire  [31:0] mm_interconnect_0_sgdma_tx_csr_readdata;               // sgdma_tx:csr_readdata -> mm_interconnect_0:sgdma_tx_csr_readdata
	wire   [3:0] mm_interconnect_0_sgdma_tx_csr_address;                // mm_interconnect_0:sgdma_tx_csr_address -> sgdma_tx:csr_address
	wire         mm_interconnect_0_sgdma_tx_csr_read;                   // mm_interconnect_0:sgdma_tx_csr_read -> sgdma_tx:csr_read
	wire         mm_interconnect_0_sgdma_tx_csr_write;                  // mm_interconnect_0:sgdma_tx_csr_write -> sgdma_tx:csr_write
	wire  [31:0] mm_interconnect_0_sgdma_tx_csr_writedata;              // mm_interconnect_0:sgdma_tx_csr_writedata -> sgdma_tx:csr_writedata
	wire  [31:0] mm_interconnect_0_nios2_debug_mem_slave_readdata;      // NIOS2:debug_mem_slave_readdata -> mm_interconnect_0:NIOS2_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios2_debug_mem_slave_waitrequest;   // NIOS2:debug_mem_slave_waitrequest -> mm_interconnect_0:NIOS2_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios2_debug_mem_slave_debugaccess;   // mm_interconnect_0:NIOS2_debug_mem_slave_debugaccess -> NIOS2:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_debug_mem_slave_address;       // mm_interconnect_0:NIOS2_debug_mem_slave_address -> NIOS2:debug_mem_slave_address
	wire         mm_interconnect_0_nios2_debug_mem_slave_read;          // mm_interconnect_0:NIOS2_debug_mem_slave_read -> NIOS2:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios2_debug_mem_slave_byteenable;    // mm_interconnect_0:NIOS2_debug_mem_slave_byteenable -> NIOS2:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios2_debug_mem_slave_write;         // mm_interconnect_0:NIOS2_debug_mem_slave_write -> NIOS2:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios2_debug_mem_slave_writedata;     // mm_interconnect_0:NIOS2_debug_mem_slave_writedata -> NIOS2:debug_mem_slave_writedata
	wire         mm_interconnect_0_redled_s1_chipselect;                // mm_interconnect_0:REDLED_s1_chipselect -> REDLED:chipselect
	wire  [31:0] mm_interconnect_0_redled_s1_readdata;                  // REDLED:readdata -> mm_interconnect_0:REDLED_s1_readdata
	wire   [1:0] mm_interconnect_0_redled_s1_address;                   // mm_interconnect_0:REDLED_s1_address -> REDLED:address
	wire         mm_interconnect_0_redled_s1_write;                     // mm_interconnect_0:REDLED_s1_write -> REDLED:write_n
	wire  [31:0] mm_interconnect_0_redled_s1_writedata;                 // mm_interconnect_0:REDLED_s1_writedata -> REDLED:writedata
	wire         mm_interconnect_0_greenled_s1_chipselect;              // mm_interconnect_0:GREENLED_s1_chipselect -> GREENLED:chipselect
	wire  [31:0] mm_interconnect_0_greenled_s1_readdata;                // GREENLED:readdata -> mm_interconnect_0:GREENLED_s1_readdata
	wire   [1:0] mm_interconnect_0_greenled_s1_address;                 // mm_interconnect_0:GREENLED_s1_address -> GREENLED:address
	wire         mm_interconnect_0_greenled_s1_write;                   // mm_interconnect_0:GREENLED_s1_write -> GREENLED:write_n
	wire  [31:0] mm_interconnect_0_greenled_s1_writedata;               // mm_interconnect_0:GREENLED_s1_writedata -> GREENLED:writedata
	wire  [31:0] mm_interconnect_0_switch_s1_readdata;                  // SWITCH:readdata -> mm_interconnect_0:SWITCH_s1_readdata
	wire   [1:0] mm_interconnect_0_switch_s1_address;                   // mm_interconnect_0:SWITCH_s1_address -> SWITCH:address
	wire         mm_interconnect_0_seg7_0_s1_chipselect;                // mm_interconnect_0:seg7_0_s1_chipselect -> seg7_0:chipselect
	wire  [31:0] mm_interconnect_0_seg7_0_s1_readdata;                  // seg7_0:readdata -> mm_interconnect_0:seg7_0_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_0_s1_address;                   // mm_interconnect_0:seg7_0_s1_address -> seg7_0:address
	wire         mm_interconnect_0_seg7_0_s1_write;                     // mm_interconnect_0:seg7_0_s1_write -> seg7_0:write_n
	wire  [31:0] mm_interconnect_0_seg7_0_s1_writedata;                 // mm_interconnect_0:seg7_0_s1_writedata -> seg7_0:writedata
	wire         mm_interconnect_0_seg7_1_s1_chipselect;                // mm_interconnect_0:seg7_1_s1_chipselect -> seg7_1:chipselect
	wire  [31:0] mm_interconnect_0_seg7_1_s1_readdata;                  // seg7_1:readdata -> mm_interconnect_0:seg7_1_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_1_s1_address;                   // mm_interconnect_0:seg7_1_s1_address -> seg7_1:address
	wire         mm_interconnect_0_seg7_1_s1_write;                     // mm_interconnect_0:seg7_1_s1_write -> seg7_1:write_n
	wire  [31:0] mm_interconnect_0_seg7_1_s1_writedata;                 // mm_interconnect_0:seg7_1_s1_writedata -> seg7_1:writedata
	wire         mm_interconnect_0_seg7_2_s1_chipselect;                // mm_interconnect_0:seg7_2_s1_chipselect -> seg7_2:chipselect
	wire  [31:0] mm_interconnect_0_seg7_2_s1_readdata;                  // seg7_2:readdata -> mm_interconnect_0:seg7_2_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_2_s1_address;                   // mm_interconnect_0:seg7_2_s1_address -> seg7_2:address
	wire         mm_interconnect_0_seg7_2_s1_write;                     // mm_interconnect_0:seg7_2_s1_write -> seg7_2:write_n
	wire  [31:0] mm_interconnect_0_seg7_2_s1_writedata;                 // mm_interconnect_0:seg7_2_s1_writedata -> seg7_2:writedata
	wire         mm_interconnect_0_seg7_3_s1_chipselect;                // mm_interconnect_0:seg7_3_s1_chipselect -> seg7_3:chipselect
	wire  [31:0] mm_interconnect_0_seg7_3_s1_readdata;                  // seg7_3:readdata -> mm_interconnect_0:seg7_3_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_3_s1_address;                   // mm_interconnect_0:seg7_3_s1_address -> seg7_3:address
	wire         mm_interconnect_0_seg7_3_s1_write;                     // mm_interconnect_0:seg7_3_s1_write -> seg7_3:write_n
	wire  [31:0] mm_interconnect_0_seg7_3_s1_writedata;                 // mm_interconnect_0:seg7_3_s1_writedata -> seg7_3:writedata
	wire         mm_interconnect_0_seg7_7_s1_chipselect;                // mm_interconnect_0:seg7_7_s1_chipselect -> seg7_7:chipselect
	wire  [31:0] mm_interconnect_0_seg7_7_s1_readdata;                  // seg7_7:readdata -> mm_interconnect_0:seg7_7_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_7_s1_address;                   // mm_interconnect_0:seg7_7_s1_address -> seg7_7:address
	wire         mm_interconnect_0_seg7_7_s1_write;                     // mm_interconnect_0:seg7_7_s1_write -> seg7_7:write_n
	wire  [31:0] mm_interconnect_0_seg7_7_s1_writedata;                 // mm_interconnect_0:seg7_7_s1_writedata -> seg7_7:writedata
	wire         mm_interconnect_0_seg7_6_s1_chipselect;                // mm_interconnect_0:seg7_6_s1_chipselect -> seg7_6:chipselect
	wire  [31:0] mm_interconnect_0_seg7_6_s1_readdata;                  // seg7_6:readdata -> mm_interconnect_0:seg7_6_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_6_s1_address;                   // mm_interconnect_0:seg7_6_s1_address -> seg7_6:address
	wire         mm_interconnect_0_seg7_6_s1_write;                     // mm_interconnect_0:seg7_6_s1_write -> seg7_6:write_n
	wire  [31:0] mm_interconnect_0_seg7_6_s1_writedata;                 // mm_interconnect_0:seg7_6_s1_writedata -> seg7_6:writedata
	wire         mm_interconnect_0_seg7_5_s1_chipselect;                // mm_interconnect_0:seg7_5_s1_chipselect -> seg7_5:chipselect
	wire  [31:0] mm_interconnect_0_seg7_5_s1_readdata;                  // seg7_5:readdata -> mm_interconnect_0:seg7_5_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_5_s1_address;                   // mm_interconnect_0:seg7_5_s1_address -> seg7_5:address
	wire         mm_interconnect_0_seg7_5_s1_write;                     // mm_interconnect_0:seg7_5_s1_write -> seg7_5:write_n
	wire  [31:0] mm_interconnect_0_seg7_5_s1_writedata;                 // mm_interconnect_0:seg7_5_s1_writedata -> seg7_5:writedata
	wire         mm_interconnect_0_seg7_4_s1_chipselect;                // mm_interconnect_0:seg7_4_s1_chipselect -> seg7_4:chipselect
	wire  [31:0] mm_interconnect_0_seg7_4_s1_readdata;                  // seg7_4:readdata -> mm_interconnect_0:seg7_4_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_4_s1_address;                   // mm_interconnect_0:seg7_4_s1_address -> seg7_4:address
	wire         mm_interconnect_0_seg7_4_s1_write;                     // mm_interconnect_0:seg7_4_s1_write -> seg7_4:write_n
	wire  [31:0] mm_interconnect_0_seg7_4_s1_writedata;                 // mm_interconnect_0:seg7_4_s1_writedata -> seg7_4:writedata
	wire         mm_interconnect_0_pushb_s1_chipselect;                 // mm_interconnect_0:PUSHB_s1_chipselect -> PUSHB:chipselect
	wire  [31:0] mm_interconnect_0_pushb_s1_readdata;                   // PUSHB:readdata -> mm_interconnect_0:PUSHB_s1_readdata
	wire   [1:0] mm_interconnect_0_pushb_s1_address;                    // mm_interconnect_0:PUSHB_s1_address -> PUSHB:address
	wire         mm_interconnect_0_pushb_s1_write;                      // mm_interconnect_0:PUSHB_s1_write -> PUSHB:write_n
	wire  [31:0] mm_interconnect_0_pushb_s1_writedata;                  // mm_interconnect_0:PUSHB_s1_writedata -> PUSHB:writedata
	wire         mm_interconnect_0_sdram_s1_chipselect;                 // mm_interconnect_0:sdram_s1_chipselect -> sdram:az_cs
	wire  [31:0] mm_interconnect_0_sdram_s1_readdata;                   // sdram:za_data -> mm_interconnect_0:sdram_s1_readdata
	wire         mm_interconnect_0_sdram_s1_waitrequest;                // sdram:za_waitrequest -> mm_interconnect_0:sdram_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_s1_address;                    // mm_interconnect_0:sdram_s1_address -> sdram:az_addr
	wire         mm_interconnect_0_sdram_s1_read;                       // mm_interconnect_0:sdram_s1_read -> sdram:az_rd_n
	wire   [3:0] mm_interconnect_0_sdram_s1_byteenable;                 // mm_interconnect_0:sdram_s1_byteenable -> sdram:az_be_n
	wire         mm_interconnect_0_sdram_s1_readdatavalid;              // sdram:za_valid -> mm_interconnect_0:sdram_s1_readdatavalid
	wire         mm_interconnect_0_sdram_s1_write;                      // mm_interconnect_0:sdram_s1_write -> sdram:az_wr_n
	wire  [31:0] mm_interconnect_0_sdram_s1_writedata;                  // mm_interconnect_0:sdram_s1_writedata -> sdram:az_data
	wire         mm_interconnect_0_timer_0_s1_chipselect;               // mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	wire  [15:0] mm_interconnect_0_timer_0_s1_readdata;                 // timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_0_s1_address;                  // mm_interconnect_0:timer_0_s1_address -> timer_0:address
	wire         mm_interconnect_0_timer_0_s1_write;                    // mm_interconnect_0:timer_0_s1_write -> timer_0:write_n
	wire  [15:0] mm_interconnect_0_timer_0_s1_writedata;                // mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	wire         mm_interconnect_0_descriptor_memory_s1_chipselect;     // mm_interconnect_0:descriptor_memory_s1_chipselect -> descriptor_memory:chipselect
	wire  [31:0] mm_interconnect_0_descriptor_memory_s1_readdata;       // descriptor_memory:readdata -> mm_interconnect_0:descriptor_memory_s1_readdata
	wire   [9:0] mm_interconnect_0_descriptor_memory_s1_address;        // mm_interconnect_0:descriptor_memory_s1_address -> descriptor_memory:address
	wire   [3:0] mm_interconnect_0_descriptor_memory_s1_byteenable;     // mm_interconnect_0:descriptor_memory_s1_byteenable -> descriptor_memory:byteenable
	wire         mm_interconnect_0_descriptor_memory_s1_write;          // mm_interconnect_0:descriptor_memory_s1_write -> descriptor_memory:write
	wire  [31:0] mm_interconnect_0_descriptor_memory_s1_writedata;      // mm_interconnect_0:descriptor_memory_s1_writedata -> descriptor_memory:writedata
	wire         mm_interconnect_0_descriptor_memory_s1_clken;          // mm_interconnect_0:descriptor_memory_s1_clken -> descriptor_memory:clken
	wire         irq_mapper_receiver0_irq;                              // sgdma_rx:csr_irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                              // sgdma_tx:csr_irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                              // JTAG:av_irq -> irq_mapper:receiver2_irq
	wire         irq_mapper_receiver3_irq;                              // timer_0:irq -> irq_mapper:receiver3_irq
	wire         irq_mapper_receiver4_irq;                              // PUSHB:irq -> irq_mapper:receiver4_irq
	wire  [31:0] nios2_irq_irq;                                         // irq_mapper:sender_irq -> NIOS2:irq
	wire         tse_receive_valid;                                     // TSE:ff_rx_dval -> avalon_st_adapter:in_0_valid
	wire  [31:0] tse_receive_data;                                      // TSE:ff_rx_data -> avalon_st_adapter:in_0_data
	wire         tse_receive_ready;                                     // avalon_st_adapter:in_0_ready -> TSE:ff_rx_rdy
	wire         tse_receive_startofpacket;                             // TSE:ff_rx_sop -> avalon_st_adapter:in_0_startofpacket
	wire         tse_receive_endofpacket;                               // TSE:ff_rx_eop -> avalon_st_adapter:in_0_endofpacket
	wire   [5:0] tse_receive_error;                                     // TSE:rx_err -> avalon_st_adapter:in_0_error
	wire   [1:0] tse_receive_empty;                                     // TSE:ff_rx_mod -> avalon_st_adapter:in_0_empty
	wire         avalon_st_adapter_out_0_valid;                         // avalon_st_adapter:out_0_valid -> sgdma_rx:in_valid
	wire  [31:0] avalon_st_adapter_out_0_data;                          // avalon_st_adapter:out_0_data -> sgdma_rx:in_data
	wire         avalon_st_adapter_out_0_ready;                         // sgdma_rx:in_ready -> avalon_st_adapter:out_0_ready
	wire         avalon_st_adapter_out_0_startofpacket;                 // avalon_st_adapter:out_0_startofpacket -> sgdma_rx:in_startofpacket
	wire         avalon_st_adapter_out_0_endofpacket;                   // avalon_st_adapter:out_0_endofpacket -> sgdma_rx:in_endofpacket
	wire   [5:0] avalon_st_adapter_out_0_error;                         // avalon_st_adapter:out_0_error -> sgdma_rx:in_error
	wire   [1:0] avalon_st_adapter_out_0_empty;                         // avalon_st_adapter:out_0_empty -> sgdma_rx:in_empty
	wire         rst_controller_reset_out_reset;                        // rst_controller:reset_out -> [GREENLED:reset_n, JTAG:rst_n, NIOS2:reset_n, PUSHB:reset_n, REDLED:reset_n, SWITCH:reset_n, TSE:reset, avalon_st_adapter:in_rst_0_reset, descriptor_memory:reset, irq_mapper:reset, mm_interconnect_0:NIOS2_reset_reset_bridge_in_reset_reset, rst_translator:in_reset, sdram:reset_n, seg7_0:reset_n, seg7_1:reset_n, seg7_2:reset_n, seg7_3:reset_n, seg7_4:reset_n, seg7_5:reset_n, seg7_6:reset_n, seg7_7:reset_n, sgdma_rx:system_reset_n, sgdma_tx:system_reset_n, sysid_qsys_0:reset_n, timer_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                    // rst_controller:reset_req -> [NIOS2:reset_req, descriptor_memory:reset_req, rst_translator:reset_req_in]
	wire         nios2_debug_reset_request_reset;                       // NIOS2:debug_reset_request -> rst_controller:reset_in0
	wire         clocks_reset_source_reset;                             // clocks:reset_source_reset -> rst_controller:reset_in1

	NIOSII_GREENLED greenled (
		.clk        (clocks_sys_clk_clk),                       //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //               reset.reset_n
		.address    (mm_interconnect_0_greenled_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_greenled_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_greenled_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_greenled_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_greenled_s1_readdata),   //                    .readdata
		.out_port   (greenleds_export)                          // external_connection.export
	);

	NIOSII_JTAG jtag (
		.clk            (clocks_sys_clk_clk),                                   //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                      //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver2_irq)                              //               irq.irq
	);

	NIOSII_NIOS2 nios2 (
		.clk                                 (clocks_sys_clk_clk),                                  //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                     //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                  //                          .reset_req
		.d_address                           (nios2_data_master_address),                           //               data_master.address
		.d_byteenable                        (nios2_data_master_byteenable),                        //                          .byteenable
		.d_read                              (nios2_data_master_read),                              //                          .read
		.d_readdata                          (nios2_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (nios2_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (nios2_data_master_write),                             //                          .write
		.d_writedata                         (nios2_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (nios2_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (nios2_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (nios2_instruction_master_address),                    //        instruction_master.address
		.i_read                              (nios2_instruction_master_read),                       //                          .read
		.i_readdata                          (nios2_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (nios2_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (nios2_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (nios2_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (nios2_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios2_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios2_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios2_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios2_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios2_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios2_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios2_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios2_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                     // custom_instruction_master.readra
	);

	NIOSII_PUSHB pushb (
		.clk        (clocks_sys_clk_clk),                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_pushb_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pushb_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pushb_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pushb_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pushb_s1_readdata),   //                    .readdata
		.in_port    (push_buttons_export),                   // external_connection.export
		.irq        (irq_mapper_receiver4_irq)               //                 irq.irq
	);

	NIOSII_REDLED redled (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_redled_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_redled_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_redled_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_redled_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_redled_s1_readdata),   //                    .readdata
		.out_port   (redleds_export)                          // external_connection.export
	);

	NIOSII_SWITCH switch (
		.clk      (clocks_sys_clk_clk),                   //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address  (mm_interconnect_0_switch_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_switch_s1_readdata), //                    .readdata
		.in_port  (switches_export)                       // external_connection.export
	);

	NIOSII_TSE tse (
		.clk           (clocks_sys_clk_clk),                             // control_port_clock_connection.clk
		.reset         (rst_controller_reset_out_reset),                 //              reset_connection.reset
		.reg_addr      (mm_interconnect_0_tse_control_port_address),     //                  control_port.address
		.reg_data_out  (mm_interconnect_0_tse_control_port_readdata),    //                              .readdata
		.reg_rd        (mm_interconnect_0_tse_control_port_read),        //                              .read
		.reg_data_in   (mm_interconnect_0_tse_control_port_writedata),   //                              .writedata
		.reg_wr        (mm_interconnect_0_tse_control_port_write),       //                              .write
		.reg_busy      (mm_interconnect_0_tse_control_port_waitrequest), //                              .waitrequest
		.tx_clk        (tse_pcs_mac_tx_clock_connection_clk),            //   pcs_mac_tx_clock_connection.clk
		.rx_clk        (tse_pcs_mac_rx_clock_connection_clk),            //   pcs_mac_rx_clock_connection.clk
		.set_10        (tse_mac_status_connection_set_10),               //         mac_status_connection.set_10
		.set_1000      (tse_mac_status_connection_set_1000),             //                              .set_1000
		.eth_mode      (tse_mac_status_connection_eth_mode),             //                              .eth_mode
		.ena_10        (tse_mac_status_connection_ena_10),               //                              .ena_10
		.rgmii_in      (tse_mac_rgmii_connection_rgmii_in),              //          mac_rgmii_connection.rgmii_in
		.rgmii_out     (tse_mac_rgmii_connection_rgmii_out),             //                              .rgmii_out
		.rx_control    (tse_mac_rgmii_connection_rx_control),            //                              .rx_control
		.tx_control    (tse_mac_rgmii_connection_tx_control),            //                              .tx_control
		.ff_rx_clk     (clocks_sys_clk_clk),                             //      receive_clock_connection.clk
		.ff_tx_clk     (clocks_sys_clk_clk),                             //     transmit_clock_connection.clk
		.ff_rx_data    (tse_receive_data),                               //                       receive.data
		.ff_rx_eop     (tse_receive_endofpacket),                        //                              .endofpacket
		.rx_err        (tse_receive_error),                              //                              .error
		.ff_rx_mod     (tse_receive_empty),                              //                              .empty
		.ff_rx_rdy     (tse_receive_ready),                              //                              .ready
		.ff_rx_sop     (tse_receive_startofpacket),                      //                              .startofpacket
		.ff_rx_dval    (tse_receive_valid),                              //                              .valid
		.ff_tx_data    (sgdma_tx_out_data),                              //                      transmit.data
		.ff_tx_eop     (sgdma_tx_out_endofpacket),                       //                              .endofpacket
		.ff_tx_err     (sgdma_tx_out_error),                             //                              .error
		.ff_tx_mod     (sgdma_tx_out_empty),                             //                              .empty
		.ff_tx_rdy     (sgdma_tx_out_ready),                             //                              .ready
		.ff_tx_sop     (sgdma_tx_out_startofpacket),                     //                              .startofpacket
		.ff_tx_wren    (sgdma_tx_out_valid),                             //                              .valid
		.mdc           (tse_mac_mdio_connection_mdc),                    //           mac_mdio_connection.mdc
		.mdio_in       (tse_mac_mdio_connection_mdio_in),                //                              .mdio_in
		.mdio_out      (tse_mac_mdio_connection_mdio_out),               //                              .mdio_out
		.mdio_oen      (tse_mac_mdio_connection_mdio_oen),               //                              .mdio_oen
		.magic_wakeup  (tse_mac_misc_connection_magic_wakeup),           //           mac_misc_connection.magic_wakeup
		.magic_sleep_n (tse_mac_misc_connection_magic_sleep_n),          //                              .magic_sleep_n
		.ff_tx_crc_fwd (tse_mac_misc_connection_ff_tx_crc_fwd),          //                              .ff_tx_crc_fwd
		.ff_tx_septy   (tse_mac_misc_connection_ff_tx_septy),            //                              .ff_tx_septy
		.tx_ff_uflow   (tse_mac_misc_connection_tx_ff_uflow),            //                              .tx_ff_uflow
		.ff_tx_a_full  (tse_mac_misc_connection_ff_tx_a_full),           //                              .ff_tx_a_full
		.ff_tx_a_empty (tse_mac_misc_connection_ff_tx_a_empty),          //                              .ff_tx_a_empty
		.rx_err_stat   (tse_mac_misc_connection_rx_err_stat),            //                              .rx_err_stat
		.rx_frm_type   (tse_mac_misc_connection_rx_frm_type),            //                              .rx_frm_type
		.ff_rx_dsav    (tse_mac_misc_connection_ff_rx_dsav),             //                              .ff_rx_dsav
		.ff_rx_a_full  (tse_mac_misc_connection_ff_rx_a_full),           //                              .ff_rx_a_full
		.ff_rx_a_empty (tse_mac_misc_connection_ff_rx_a_empty)           //                              .ff_rx_a_empty
	);

	NIOSII_clocks clocks (
		.ref_clk_clk        (clk_clk),                   //      ref_clk.clk
		.ref_reset_reset    (reset_reset),               //    ref_reset.reset
		.sys_clk_clk        (clocks_sys_clk_clk),        //      sys_clk.clk
		.sdram_clk_clk      (sdram_clk_clk),             //    sdram_clk.clk
		.reset_source_reset (clocks_reset_source_reset)  // reset_source.reset
	);

	NIOSII_descriptor_memory descriptor_memory (
		.clk        (clocks_sys_clk_clk),                                //   clk1.clk
		.address    (mm_interconnect_0_descriptor_memory_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_descriptor_memory_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_descriptor_memory_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_descriptor_memory_s1_write),      //       .write
		.readdata   (mm_interconnect_0_descriptor_memory_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_descriptor_memory_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_descriptor_memory_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                    // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),                //       .reset_req
		.freeze     (1'b0)                                               // (terminated)
	);

	NIOSII_sdram sdram (
		.clk            (clocks_sys_clk_clk),                       //   clk.clk
		.reset_n        (~rst_controller_reset_out_reset),          // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_wire_addr),                          //  wire.export
		.zs_ba          (sdram_wire_ba),                            //      .export
		.zs_cas_n       (sdram_wire_cas_n),                         //      .export
		.zs_cke         (sdram_wire_cke),                           //      .export
		.zs_cs_n        (sdram_wire_cs_n),                          //      .export
		.zs_dq          (sdram_wire_dq),                            //      .export
		.zs_dqm         (sdram_wire_dqm),                           //      .export
		.zs_ras_n       (sdram_wire_ras_n),                         //      .export
		.zs_we_n        (sdram_wire_we_n)                           //      .export
	);

	NIOSII_seg7_0 seg7_0 (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg7_0_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_0_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_0_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_0_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_0_s1_readdata),   //                    .readdata
		.out_port   (seg7_0_export)                           // external_connection.export
	);

	NIOSII_seg7_0 seg7_1 (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg7_1_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_1_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_1_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_1_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_1_s1_readdata),   //                    .readdata
		.out_port   (seg7_1_export)                           // external_connection.export
	);

	NIOSII_seg7_0 seg7_2 (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg7_2_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_2_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_2_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_2_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_2_s1_readdata),   //                    .readdata
		.out_port   (seg7_2_export)                           // external_connection.export
	);

	NIOSII_seg7_0 seg7_3 (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg7_3_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_3_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_3_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_3_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_3_s1_readdata),   //                    .readdata
		.out_port   (seg7_3_export)                           // external_connection.export
	);

	NIOSII_seg7_0 seg7_4 (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg7_4_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_4_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_4_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_4_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_4_s1_readdata),   //                    .readdata
		.out_port   (seg7_4_export)                           // external_connection.export
	);

	NIOSII_seg7_0 seg7_5 (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg7_5_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_5_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_5_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_5_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_5_s1_readdata),   //                    .readdata
		.out_port   (seg7_5_export)                           // external_connection.export
	);

	NIOSII_seg7_0 seg7_6 (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg7_6_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_6_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_6_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_6_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_6_s1_readdata),   //                    .readdata
		.out_port   (seg7_6_export)                           // external_connection.export
	);

	NIOSII_seg7_0 seg7_7 (
		.clk        (clocks_sys_clk_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_seg7_7_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_7_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_7_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_7_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_7_s1_readdata),   //                    .readdata
		.out_port   (seg7_7_export)                           // external_connection.export
	);

	NIOSII_sgdma_rx sgdma_rx (
		.clk                           (clocks_sys_clk_clk),                        //              clk.clk
		.system_reset_n                (~rst_controller_reset_out_reset),           //            reset.reset_n
		.csr_chipselect                (mm_interconnect_0_sgdma_rx_csr_chipselect), //              csr.chipselect
		.csr_address                   (mm_interconnect_0_sgdma_rx_csr_address),    //                 .address
		.csr_read                      (mm_interconnect_0_sgdma_rx_csr_read),       //                 .read
		.csr_write                     (mm_interconnect_0_sgdma_rx_csr_write),      //                 .write
		.csr_writedata                 (mm_interconnect_0_sgdma_rx_csr_writedata),  //                 .writedata
		.csr_readdata                  (mm_interconnect_0_sgdma_rx_csr_readdata),   //                 .readdata
		.descriptor_read_readdata      (sgdma_rx_descriptor_read_readdata),         //  descriptor_read.readdata
		.descriptor_read_readdatavalid (sgdma_rx_descriptor_read_readdatavalid),    //                 .readdatavalid
		.descriptor_read_waitrequest   (sgdma_rx_descriptor_read_waitrequest),      //                 .waitrequest
		.descriptor_read_address       (sgdma_rx_descriptor_read_address),          //                 .address
		.descriptor_read_read          (sgdma_rx_descriptor_read_read),             //                 .read
		.descriptor_write_waitrequest  (sgdma_rx_descriptor_write_waitrequest),     // descriptor_write.waitrequest
		.descriptor_write_address      (sgdma_rx_descriptor_write_address),         //                 .address
		.descriptor_write_write        (sgdma_rx_descriptor_write_write),           //                 .write
		.descriptor_write_writedata    (sgdma_rx_descriptor_write_writedata),       //                 .writedata
		.csr_irq                       (irq_mapper_receiver0_irq),                  //          csr_irq.irq
		.in_startofpacket              (avalon_st_adapter_out_0_startofpacket),     //               in.startofpacket
		.in_endofpacket                (avalon_st_adapter_out_0_endofpacket),       //                 .endofpacket
		.in_data                       (avalon_st_adapter_out_0_data),              //                 .data
		.in_valid                      (avalon_st_adapter_out_0_valid),             //                 .valid
		.in_ready                      (avalon_st_adapter_out_0_ready),             //                 .ready
		.in_empty                      (avalon_st_adapter_out_0_empty),             //                 .empty
		.in_error                      (avalon_st_adapter_out_0_error),             //                 .error
		.m_write_waitrequest           (sgdma_rx_m_write_waitrequest),              //          m_write.waitrequest
		.m_write_address               (sgdma_rx_m_write_address),                  //                 .address
		.m_write_write                 (sgdma_rx_m_write_write),                    //                 .write
		.m_write_writedata             (sgdma_rx_m_write_writedata),                //                 .writedata
		.m_write_byteenable            (sgdma_rx_m_write_byteenable)                //                 .byteenable
	);

	NIOSII_sgdma_tx sgdma_tx (
		.clk                           (clocks_sys_clk_clk),                        //              clk.clk
		.system_reset_n                (~rst_controller_reset_out_reset),           //            reset.reset_n
		.csr_chipselect                (mm_interconnect_0_sgdma_tx_csr_chipselect), //              csr.chipselect
		.csr_address                   (mm_interconnect_0_sgdma_tx_csr_address),    //                 .address
		.csr_read                      (mm_interconnect_0_sgdma_tx_csr_read),       //                 .read
		.csr_write                     (mm_interconnect_0_sgdma_tx_csr_write),      //                 .write
		.csr_writedata                 (mm_interconnect_0_sgdma_tx_csr_writedata),  //                 .writedata
		.csr_readdata                  (mm_interconnect_0_sgdma_tx_csr_readdata),   //                 .readdata
		.descriptor_read_readdata      (sgdma_tx_descriptor_read_readdata),         //  descriptor_read.readdata
		.descriptor_read_readdatavalid (sgdma_tx_descriptor_read_readdatavalid),    //                 .readdatavalid
		.descriptor_read_waitrequest   (sgdma_tx_descriptor_read_waitrequest),      //                 .waitrequest
		.descriptor_read_address       (sgdma_tx_descriptor_read_address),          //                 .address
		.descriptor_read_read          (sgdma_tx_descriptor_read_read),             //                 .read
		.descriptor_write_waitrequest  (sgdma_tx_descriptor_write_waitrequest),     // descriptor_write.waitrequest
		.descriptor_write_address      (sgdma_tx_descriptor_write_address),         //                 .address
		.descriptor_write_write        (sgdma_tx_descriptor_write_write),           //                 .write
		.descriptor_write_writedata    (sgdma_tx_descriptor_write_writedata),       //                 .writedata
		.csr_irq                       (irq_mapper_receiver1_irq),                  //          csr_irq.irq
		.m_read_readdata               (sgdma_tx_m_read_readdata),                  //           m_read.readdata
		.m_read_readdatavalid          (sgdma_tx_m_read_readdatavalid),             //                 .readdatavalid
		.m_read_waitrequest            (sgdma_tx_m_read_waitrequest),               //                 .waitrequest
		.m_read_address                (sgdma_tx_m_read_address),                   //                 .address
		.m_read_read                   (sgdma_tx_m_read_read),                      //                 .read
		.out_data                      (sgdma_tx_out_data),                         //              out.data
		.out_valid                     (sgdma_tx_out_valid),                        //                 .valid
		.out_ready                     (sgdma_tx_out_ready),                        //                 .ready
		.out_endofpacket               (sgdma_tx_out_endofpacket),                  //                 .endofpacket
		.out_startofpacket             (sgdma_tx_out_startofpacket),                //                 .startofpacket
		.out_empty                     (sgdma_tx_out_empty),                        //                 .empty
		.out_error                     (sgdma_tx_out_error)                         //                 .error
	);

	NIOSII_sysid_qsys_0 sysid_qsys_0 (
		.clock    (clocks_sys_clk_clk),                                    //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                       //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address)   //              .address
	);

	NIOSII_timer_0 timer_0 (
		.clk        (clocks_sys_clk_clk),                      //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         // reset.reset_n
		.address    (mm_interconnect_0_timer_0_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_0_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_0_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_0_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_0_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver3_irq)                 //   irq.irq
	);

	NIOSII_mm_interconnect_0 mm_interconnect_0 (
		.clocks_sys_clk_clk                      (clocks_sys_clk_clk),                                    //                    clocks_sys_clk.clk
		.NIOS2_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                        // NIOS2_reset_reset_bridge_in_reset.reset
		.NIOS2_data_master_address               (nios2_data_master_address),                             //                 NIOS2_data_master.address
		.NIOS2_data_master_waitrequest           (nios2_data_master_waitrequest),                         //                                  .waitrequest
		.NIOS2_data_master_byteenable            (nios2_data_master_byteenable),                          //                                  .byteenable
		.NIOS2_data_master_read                  (nios2_data_master_read),                                //                                  .read
		.NIOS2_data_master_readdata              (nios2_data_master_readdata),                            //                                  .readdata
		.NIOS2_data_master_readdatavalid         (nios2_data_master_readdatavalid),                       //                                  .readdatavalid
		.NIOS2_data_master_write                 (nios2_data_master_write),                               //                                  .write
		.NIOS2_data_master_writedata             (nios2_data_master_writedata),                           //                                  .writedata
		.NIOS2_data_master_debugaccess           (nios2_data_master_debugaccess),                         //                                  .debugaccess
		.NIOS2_instruction_master_address        (nios2_instruction_master_address),                      //          NIOS2_instruction_master.address
		.NIOS2_instruction_master_waitrequest    (nios2_instruction_master_waitrequest),                  //                                  .waitrequest
		.NIOS2_instruction_master_read           (nios2_instruction_master_read),                         //                                  .read
		.NIOS2_instruction_master_readdata       (nios2_instruction_master_readdata),                     //                                  .readdata
		.NIOS2_instruction_master_readdatavalid  (nios2_instruction_master_readdatavalid),                //                                  .readdatavalid
		.sgdma_rx_descriptor_read_address        (sgdma_rx_descriptor_read_address),                      //          sgdma_rx_descriptor_read.address
		.sgdma_rx_descriptor_read_waitrequest    (sgdma_rx_descriptor_read_waitrequest),                  //                                  .waitrequest
		.sgdma_rx_descriptor_read_read           (sgdma_rx_descriptor_read_read),                         //                                  .read
		.sgdma_rx_descriptor_read_readdata       (sgdma_rx_descriptor_read_readdata),                     //                                  .readdata
		.sgdma_rx_descriptor_read_readdatavalid  (sgdma_rx_descriptor_read_readdatavalid),                //                                  .readdatavalid
		.sgdma_rx_descriptor_write_address       (sgdma_rx_descriptor_write_address),                     //         sgdma_rx_descriptor_write.address
		.sgdma_rx_descriptor_write_waitrequest   (sgdma_rx_descriptor_write_waitrequest),                 //                                  .waitrequest
		.sgdma_rx_descriptor_write_write         (sgdma_rx_descriptor_write_write),                       //                                  .write
		.sgdma_rx_descriptor_write_writedata     (sgdma_rx_descriptor_write_writedata),                   //                                  .writedata
		.sgdma_rx_m_write_address                (sgdma_rx_m_write_address),                              //                  sgdma_rx_m_write.address
		.sgdma_rx_m_write_waitrequest            (sgdma_rx_m_write_waitrequest),                          //                                  .waitrequest
		.sgdma_rx_m_write_byteenable             (sgdma_rx_m_write_byteenable),                           //                                  .byteenable
		.sgdma_rx_m_write_write                  (sgdma_rx_m_write_write),                                //                                  .write
		.sgdma_rx_m_write_writedata              (sgdma_rx_m_write_writedata),                            //                                  .writedata
		.sgdma_tx_descriptor_read_address        (sgdma_tx_descriptor_read_address),                      //          sgdma_tx_descriptor_read.address
		.sgdma_tx_descriptor_read_waitrequest    (sgdma_tx_descriptor_read_waitrequest),                  //                                  .waitrequest
		.sgdma_tx_descriptor_read_read           (sgdma_tx_descriptor_read_read),                         //                                  .read
		.sgdma_tx_descriptor_read_readdata       (sgdma_tx_descriptor_read_readdata),                     //                                  .readdata
		.sgdma_tx_descriptor_read_readdatavalid  (sgdma_tx_descriptor_read_readdatavalid),                //                                  .readdatavalid
		.sgdma_tx_descriptor_write_address       (sgdma_tx_descriptor_write_address),                     //         sgdma_tx_descriptor_write.address
		.sgdma_tx_descriptor_write_waitrequest   (sgdma_tx_descriptor_write_waitrequest),                 //                                  .waitrequest
		.sgdma_tx_descriptor_write_write         (sgdma_tx_descriptor_write_write),                       //                                  .write
		.sgdma_tx_descriptor_write_writedata     (sgdma_tx_descriptor_write_writedata),                   //                                  .writedata
		.sgdma_tx_m_read_address                 (sgdma_tx_m_read_address),                               //                   sgdma_tx_m_read.address
		.sgdma_tx_m_read_waitrequest             (sgdma_tx_m_read_waitrequest),                           //                                  .waitrequest
		.sgdma_tx_m_read_read                    (sgdma_tx_m_read_read),                                  //                                  .read
		.sgdma_tx_m_read_readdata                (sgdma_tx_m_read_readdata),                              //                                  .readdata
		.sgdma_tx_m_read_readdatavalid           (sgdma_tx_m_read_readdatavalid),                         //                                  .readdatavalid
		.descriptor_memory_s1_address            (mm_interconnect_0_descriptor_memory_s1_address),        //              descriptor_memory_s1.address
		.descriptor_memory_s1_write              (mm_interconnect_0_descriptor_memory_s1_write),          //                                  .write
		.descriptor_memory_s1_readdata           (mm_interconnect_0_descriptor_memory_s1_readdata),       //                                  .readdata
		.descriptor_memory_s1_writedata          (mm_interconnect_0_descriptor_memory_s1_writedata),      //                                  .writedata
		.descriptor_memory_s1_byteenable         (mm_interconnect_0_descriptor_memory_s1_byteenable),     //                                  .byteenable
		.descriptor_memory_s1_chipselect         (mm_interconnect_0_descriptor_memory_s1_chipselect),     //                                  .chipselect
		.descriptor_memory_s1_clken              (mm_interconnect_0_descriptor_memory_s1_clken),          //                                  .clken
		.GREENLED_s1_address                     (mm_interconnect_0_greenled_s1_address),                 //                       GREENLED_s1.address
		.GREENLED_s1_write                       (mm_interconnect_0_greenled_s1_write),                   //                                  .write
		.GREENLED_s1_readdata                    (mm_interconnect_0_greenled_s1_readdata),                //                                  .readdata
		.GREENLED_s1_writedata                   (mm_interconnect_0_greenled_s1_writedata),               //                                  .writedata
		.GREENLED_s1_chipselect                  (mm_interconnect_0_greenled_s1_chipselect),              //                                  .chipselect
		.JTAG_avalon_jtag_slave_address          (mm_interconnect_0_jtag_avalon_jtag_slave_address),      //            JTAG_avalon_jtag_slave.address
		.JTAG_avalon_jtag_slave_write            (mm_interconnect_0_jtag_avalon_jtag_slave_write),        //                                  .write
		.JTAG_avalon_jtag_slave_read             (mm_interconnect_0_jtag_avalon_jtag_slave_read),         //                                  .read
		.JTAG_avalon_jtag_slave_readdata         (mm_interconnect_0_jtag_avalon_jtag_slave_readdata),     //                                  .readdata
		.JTAG_avalon_jtag_slave_writedata        (mm_interconnect_0_jtag_avalon_jtag_slave_writedata),    //                                  .writedata
		.JTAG_avalon_jtag_slave_waitrequest      (mm_interconnect_0_jtag_avalon_jtag_slave_waitrequest),  //                                  .waitrequest
		.JTAG_avalon_jtag_slave_chipselect       (mm_interconnect_0_jtag_avalon_jtag_slave_chipselect),   //                                  .chipselect
		.NIOS2_debug_mem_slave_address           (mm_interconnect_0_nios2_debug_mem_slave_address),       //             NIOS2_debug_mem_slave.address
		.NIOS2_debug_mem_slave_write             (mm_interconnect_0_nios2_debug_mem_slave_write),         //                                  .write
		.NIOS2_debug_mem_slave_read              (mm_interconnect_0_nios2_debug_mem_slave_read),          //                                  .read
		.NIOS2_debug_mem_slave_readdata          (mm_interconnect_0_nios2_debug_mem_slave_readdata),      //                                  .readdata
		.NIOS2_debug_mem_slave_writedata         (mm_interconnect_0_nios2_debug_mem_slave_writedata),     //                                  .writedata
		.NIOS2_debug_mem_slave_byteenable        (mm_interconnect_0_nios2_debug_mem_slave_byteenable),    //                                  .byteenable
		.NIOS2_debug_mem_slave_waitrequest       (mm_interconnect_0_nios2_debug_mem_slave_waitrequest),   //                                  .waitrequest
		.NIOS2_debug_mem_slave_debugaccess       (mm_interconnect_0_nios2_debug_mem_slave_debugaccess),   //                                  .debugaccess
		.PUSHB_s1_address                        (mm_interconnect_0_pushb_s1_address),                    //                          PUSHB_s1.address
		.PUSHB_s1_write                          (mm_interconnect_0_pushb_s1_write),                      //                                  .write
		.PUSHB_s1_readdata                       (mm_interconnect_0_pushb_s1_readdata),                   //                                  .readdata
		.PUSHB_s1_writedata                      (mm_interconnect_0_pushb_s1_writedata),                  //                                  .writedata
		.PUSHB_s1_chipselect                     (mm_interconnect_0_pushb_s1_chipselect),                 //                                  .chipselect
		.REDLED_s1_address                       (mm_interconnect_0_redled_s1_address),                   //                         REDLED_s1.address
		.REDLED_s1_write                         (mm_interconnect_0_redled_s1_write),                     //                                  .write
		.REDLED_s1_readdata                      (mm_interconnect_0_redled_s1_readdata),                  //                                  .readdata
		.REDLED_s1_writedata                     (mm_interconnect_0_redled_s1_writedata),                 //                                  .writedata
		.REDLED_s1_chipselect                    (mm_interconnect_0_redled_s1_chipselect),                //                                  .chipselect
		.sdram_s1_address                        (mm_interconnect_0_sdram_s1_address),                    //                          sdram_s1.address
		.sdram_s1_write                          (mm_interconnect_0_sdram_s1_write),                      //                                  .write
		.sdram_s1_read                           (mm_interconnect_0_sdram_s1_read),                       //                                  .read
		.sdram_s1_readdata                       (mm_interconnect_0_sdram_s1_readdata),                   //                                  .readdata
		.sdram_s1_writedata                      (mm_interconnect_0_sdram_s1_writedata),                  //                                  .writedata
		.sdram_s1_byteenable                     (mm_interconnect_0_sdram_s1_byteenable),                 //                                  .byteenable
		.sdram_s1_readdatavalid                  (mm_interconnect_0_sdram_s1_readdatavalid),              //                                  .readdatavalid
		.sdram_s1_waitrequest                    (mm_interconnect_0_sdram_s1_waitrequest),                //                                  .waitrequest
		.sdram_s1_chipselect                     (mm_interconnect_0_sdram_s1_chipselect),                 //                                  .chipselect
		.seg7_0_s1_address                       (mm_interconnect_0_seg7_0_s1_address),                   //                         seg7_0_s1.address
		.seg7_0_s1_write                         (mm_interconnect_0_seg7_0_s1_write),                     //                                  .write
		.seg7_0_s1_readdata                      (mm_interconnect_0_seg7_0_s1_readdata),                  //                                  .readdata
		.seg7_0_s1_writedata                     (mm_interconnect_0_seg7_0_s1_writedata),                 //                                  .writedata
		.seg7_0_s1_chipselect                    (mm_interconnect_0_seg7_0_s1_chipselect),                //                                  .chipselect
		.seg7_1_s1_address                       (mm_interconnect_0_seg7_1_s1_address),                   //                         seg7_1_s1.address
		.seg7_1_s1_write                         (mm_interconnect_0_seg7_1_s1_write),                     //                                  .write
		.seg7_1_s1_readdata                      (mm_interconnect_0_seg7_1_s1_readdata),                  //                                  .readdata
		.seg7_1_s1_writedata                     (mm_interconnect_0_seg7_1_s1_writedata),                 //                                  .writedata
		.seg7_1_s1_chipselect                    (mm_interconnect_0_seg7_1_s1_chipselect),                //                                  .chipselect
		.seg7_2_s1_address                       (mm_interconnect_0_seg7_2_s1_address),                   //                         seg7_2_s1.address
		.seg7_2_s1_write                         (mm_interconnect_0_seg7_2_s1_write),                     //                                  .write
		.seg7_2_s1_readdata                      (mm_interconnect_0_seg7_2_s1_readdata),                  //                                  .readdata
		.seg7_2_s1_writedata                     (mm_interconnect_0_seg7_2_s1_writedata),                 //                                  .writedata
		.seg7_2_s1_chipselect                    (mm_interconnect_0_seg7_2_s1_chipselect),                //                                  .chipselect
		.seg7_3_s1_address                       (mm_interconnect_0_seg7_3_s1_address),                   //                         seg7_3_s1.address
		.seg7_3_s1_write                         (mm_interconnect_0_seg7_3_s1_write),                     //                                  .write
		.seg7_3_s1_readdata                      (mm_interconnect_0_seg7_3_s1_readdata),                  //                                  .readdata
		.seg7_3_s1_writedata                     (mm_interconnect_0_seg7_3_s1_writedata),                 //                                  .writedata
		.seg7_3_s1_chipselect                    (mm_interconnect_0_seg7_3_s1_chipselect),                //                                  .chipselect
		.seg7_4_s1_address                       (mm_interconnect_0_seg7_4_s1_address),                   //                         seg7_4_s1.address
		.seg7_4_s1_write                         (mm_interconnect_0_seg7_4_s1_write),                     //                                  .write
		.seg7_4_s1_readdata                      (mm_interconnect_0_seg7_4_s1_readdata),                  //                                  .readdata
		.seg7_4_s1_writedata                     (mm_interconnect_0_seg7_4_s1_writedata),                 //                                  .writedata
		.seg7_4_s1_chipselect                    (mm_interconnect_0_seg7_4_s1_chipselect),                //                                  .chipselect
		.seg7_5_s1_address                       (mm_interconnect_0_seg7_5_s1_address),                   //                         seg7_5_s1.address
		.seg7_5_s1_write                         (mm_interconnect_0_seg7_5_s1_write),                     //                                  .write
		.seg7_5_s1_readdata                      (mm_interconnect_0_seg7_5_s1_readdata),                  //                                  .readdata
		.seg7_5_s1_writedata                     (mm_interconnect_0_seg7_5_s1_writedata),                 //                                  .writedata
		.seg7_5_s1_chipselect                    (mm_interconnect_0_seg7_5_s1_chipselect),                //                                  .chipselect
		.seg7_6_s1_address                       (mm_interconnect_0_seg7_6_s1_address),                   //                         seg7_6_s1.address
		.seg7_6_s1_write                         (mm_interconnect_0_seg7_6_s1_write),                     //                                  .write
		.seg7_6_s1_readdata                      (mm_interconnect_0_seg7_6_s1_readdata),                  //                                  .readdata
		.seg7_6_s1_writedata                     (mm_interconnect_0_seg7_6_s1_writedata),                 //                                  .writedata
		.seg7_6_s1_chipselect                    (mm_interconnect_0_seg7_6_s1_chipselect),                //                                  .chipselect
		.seg7_7_s1_address                       (mm_interconnect_0_seg7_7_s1_address),                   //                         seg7_7_s1.address
		.seg7_7_s1_write                         (mm_interconnect_0_seg7_7_s1_write),                     //                                  .write
		.seg7_7_s1_readdata                      (mm_interconnect_0_seg7_7_s1_readdata),                  //                                  .readdata
		.seg7_7_s1_writedata                     (mm_interconnect_0_seg7_7_s1_writedata),                 //                                  .writedata
		.seg7_7_s1_chipselect                    (mm_interconnect_0_seg7_7_s1_chipselect),                //                                  .chipselect
		.sgdma_rx_csr_address                    (mm_interconnect_0_sgdma_rx_csr_address),                //                      sgdma_rx_csr.address
		.sgdma_rx_csr_write                      (mm_interconnect_0_sgdma_rx_csr_write),                  //                                  .write
		.sgdma_rx_csr_read                       (mm_interconnect_0_sgdma_rx_csr_read),                   //                                  .read
		.sgdma_rx_csr_readdata                   (mm_interconnect_0_sgdma_rx_csr_readdata),               //                                  .readdata
		.sgdma_rx_csr_writedata                  (mm_interconnect_0_sgdma_rx_csr_writedata),              //                                  .writedata
		.sgdma_rx_csr_chipselect                 (mm_interconnect_0_sgdma_rx_csr_chipselect),             //                                  .chipselect
		.sgdma_tx_csr_address                    (mm_interconnect_0_sgdma_tx_csr_address),                //                      sgdma_tx_csr.address
		.sgdma_tx_csr_write                      (mm_interconnect_0_sgdma_tx_csr_write),                  //                                  .write
		.sgdma_tx_csr_read                       (mm_interconnect_0_sgdma_tx_csr_read),                   //                                  .read
		.sgdma_tx_csr_readdata                   (mm_interconnect_0_sgdma_tx_csr_readdata),               //                                  .readdata
		.sgdma_tx_csr_writedata                  (mm_interconnect_0_sgdma_tx_csr_writedata),              //                                  .writedata
		.sgdma_tx_csr_chipselect                 (mm_interconnect_0_sgdma_tx_csr_chipselect),             //                                  .chipselect
		.SWITCH_s1_address                       (mm_interconnect_0_switch_s1_address),                   //                         SWITCH_s1.address
		.SWITCH_s1_readdata                      (mm_interconnect_0_switch_s1_readdata),                  //                                  .readdata
		.sysid_qsys_0_control_slave_address      (mm_interconnect_0_sysid_qsys_0_control_slave_address),  //        sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata     (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), //                                  .readdata
		.timer_0_s1_address                      (mm_interconnect_0_timer_0_s1_address),                  //                        timer_0_s1.address
		.timer_0_s1_write                        (mm_interconnect_0_timer_0_s1_write),                    //                                  .write
		.timer_0_s1_readdata                     (mm_interconnect_0_timer_0_s1_readdata),                 //                                  .readdata
		.timer_0_s1_writedata                    (mm_interconnect_0_timer_0_s1_writedata),                //                                  .writedata
		.timer_0_s1_chipselect                   (mm_interconnect_0_timer_0_s1_chipselect),               //                                  .chipselect
		.TSE_control_port_address                (mm_interconnect_0_tse_control_port_address),            //                  TSE_control_port.address
		.TSE_control_port_write                  (mm_interconnect_0_tse_control_port_write),              //                                  .write
		.TSE_control_port_read                   (mm_interconnect_0_tse_control_port_read),               //                                  .read
		.TSE_control_port_readdata               (mm_interconnect_0_tse_control_port_readdata),           //                                  .readdata
		.TSE_control_port_writedata              (mm_interconnect_0_tse_control_port_writedata),          //                                  .writedata
		.TSE_control_port_waitrequest            (mm_interconnect_0_tse_control_port_waitrequest)         //                                  .waitrequest
	);

	NIOSII_irq_mapper irq_mapper (
		.clk           (clocks_sys_clk_clk),             //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.receiver3_irq (irq_mapper_receiver3_irq),       // receiver3.irq
		.receiver4_irq (irq_mapper_receiver4_irq),       // receiver4.irq
		.sender_irq    (nios2_irq_irq)                   //    sender.irq
	);

	NIOSII_avalon_st_adapter #(
		.inBitsPerSymbol (8),
		.inUsePackets    (1),
		.inDataWidth     (32),
		.inChannelWidth  (0),
		.inErrorWidth    (6),
		.inUseEmptyPort  (1),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (2),
		.outDataWidth    (32),
		.outChannelWidth (0),
		.outErrorWidth   (6),
		.outUseEmptyPort (1),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk        (clocks_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),        // in_rst_0.reset
		.in_0_data           (tse_receive_data),                      //     in_0.data
		.in_0_valid          (tse_receive_valid),                     //         .valid
		.in_0_ready          (tse_receive_ready),                     //         .ready
		.in_0_startofpacket  (tse_receive_startofpacket),             //         .startofpacket
		.in_0_endofpacket    (tse_receive_endofpacket),               //         .endofpacket
		.in_0_empty          (tse_receive_empty),                     //         .empty
		.in_0_error          (tse_receive_error),                     //         .error
		.out_0_data          (avalon_st_adapter_out_0_data),          //    out_0.data
		.out_0_valid         (avalon_st_adapter_out_0_valid),         //         .valid
		.out_0_ready         (avalon_st_adapter_out_0_ready),         //         .ready
		.out_0_startofpacket (avalon_st_adapter_out_0_startofpacket), //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_out_0_endofpacket),   //         .endofpacket
		.out_0_empty         (avalon_st_adapter_out_0_empty),         //         .empty
		.out_0_error         (avalon_st_adapter_out_0_error)          //         .error
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (nios2_debug_reset_request_reset),    // reset_in0.reset
		.reset_in1      (clocks_reset_source_reset),          // reset_in1.reset
		.clk            (clocks_sys_clk_clk),                 //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
